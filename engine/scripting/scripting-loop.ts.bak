import { EventEmitter } from 'events';
import { AVGScriptUnit } from './script-unit';
import { AVGStory } from './story';
import { AVGData } from '../data/avg-data';


export class AVGScriptingLoop {

    private _scriptUnits: Array<AVGScriptUnit> = [];
    private _cursor = 0;
    private _handle = null;
    private _loopEvent: EventEmitter;

    constructor() {
        this._loopEvent = new EventEmitter();
    }

    /**
     * Add an story to the scripting loop system
     * 
     * @param {AVGStory} story 
     * @memberof AVGScriptingLoop
     */
    public addStory(story: AVGStory) {
        let scripts = story.getScripts();
        this._scriptUnits = this._scriptUnits.concat(scripts);
    }

    /**
     * Start to dispatch all scripting units
     * 
     * @returns {EventEmitter} 
     * @memberof AVGScriptingLoop
     */
    public run(): EventEmitter {
        // if (this._scriptUnits.length === 0) {
        //     this._loopEvent.emit(LoopEvents.OnLoopEnd);
        //     return this._loopEvent;
        // }

        // this._handle = setInterval(() => {
        //     let current = this._scriptUnits[this._cursor];
        //     if (!current) {
        //         this._loopEvent.emit(LoopEvents.OnLoopEnd);
        //         this.reset();
        //         return;
        //     }

        //     // current.runner && current.runner().then((script: AVGScriptUnit) => {
        //         // this._loopEvent.emit(LoopEvents.OnLoopData, current);

        //         // if (!script.Callback) {
        //         //     this._loopEvent.emit(LoopEvents.OnLoopResume);
        //         //     return;
        //         // }

        //         // script.Callback.then((data: AVGData) => {
        //         //     this._loopEvent.emit(LoopEvents.OnLoopResume);
        //         // }, _ => { });

        //     // }, _ => { });

        //     // this.waitFor();

        // }, 1);

        return this._loopEvent;
    }

    private waitFor() {
        console.log('Scripting loop was waiting for ...');

        this.reset();

        // this._loopEvent.once(LoopEvents.OnLoopResume, () => {
        //     this._cursor++;
        //     this.run();
        // });
    }

    private reset() {
        if (this._handle) {
            clearInterval(this._handle);
        }
    }
}